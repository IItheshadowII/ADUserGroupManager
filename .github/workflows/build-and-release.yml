name: BuildAndRelease

on:
  push:
    tags:
      - 'v*'  

jobs:
  build:
    runs-on: windows-latest  # Necesitamos Windows para compilar .NET Framework 4.8

    steps:
      # 1) Descarga tu código
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Instala GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'

      # 3) Ejecuta GitVersion y guarda la versión en variables
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14
        with:
          useConfigFile: true
          # ↑ Si tienes un archivo GitVersion.yml en la raíz de tu repo, ajusta 'true' para usarlo

      # 4) Actualiza el update.json con la nueva versión
      - name: Update update.json
        shell: pwsh
        run: |
          # Tomamos la versión SemVer de GitVersion
          $version = "${{ steps.gitversion.outputs.SemVer }}"

          # Reemplaza la línea "version" en update.json
          (Get-Content update.json) |
            ForEach-Object { $_ -replace '"version": ".*"', '"version": "' + $version + '"' } |
            ForEach-Object { $_ -replace '"downloadUrl": ".*"', '"downloadUrl": "https://github.com/<TU_USUARIO>/<TU_REPO>/releases/download/v' + $version + '/ADUserGroupManager.exe"' } |
            Set-Content update.json

          # Configurar git para commitear
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update.json
          git commit -m "Update update.json to version $version"
          git push origin HEAD

      # 5) Compilar el proyecto en modo Release
      - name: Build solution
        run: dotnet build --configuration Release

      # 6) Crear/actualizar release y subir el .exe como asset
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          releaseName: "Release ${{ steps.gitversion.outputs.SemVer }}"
          draft: false
          prerelease: false
          artifacts: "bin/Release/net48/ADUserGroupManager.exe"
          artifactName: "ADUserGroupManager.exe"
