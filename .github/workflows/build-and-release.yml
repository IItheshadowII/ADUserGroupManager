name: BuildAndRelease
on:
  push:
    branches:
      - master
    tags:
      - 'v*'
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch all tags and commits
        run: |
          git fetch --prune --unshallow
          git fetch --tags
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '5.x'
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14
        with:
          useConfigFile: true
      - name: Add System.Resources.Extensions NuGet package
        run: |
          dotnet add ADUserGroupManager/ADUserGroupManager.csproj package System.Resources.Extensions
      - name: Update .csproj file
        shell: pwsh
        run: |
          $csprojPath = "ADUserGroupManager/ADUserGroupManager.csproj"
          [xml]$csproj = Get-Content $csprojPath
          
          # Add the GenerateResourceUsePreserializedResources property
          $propGroup = $csproj.CreateElement("PropertyGroup", $csproj.Project.xmlns)
          $genResElement = $csproj.CreateElement("GenerateResourceUsePreserializedResources", $csproj.Project.xmlns)
          $genResElement.InnerText = "true"
          $propGroup.AppendChild($genResElement)
          $csproj.Project.AppendChild($propGroup)
          
          $csproj.Save($csprojPath)
      - name: Build solution
        run: dotnet build --configuration Release
      - name: Update update.json for release
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $version = "${{ steps.gitversion.outputs.SemVer }}"
          $content = Get-Content update.json
          $updatedContent = @()
          foreach ($line in $content) {
            if ($line -match '"version"') {
              $updatedContent += $line -replace '"version"\s*:\s*".*"', ('"version": "' + $version + '"')
            }
            elseif ($line -match '"downloadUrl"') {
              $updatedContent += $line -replace '"downloadUrl"\s*:\s*".*"', ('"downloadUrl": "https://github.com/IItheshadowII/ADUserGroupManager/releases/download/v' + $version + '/ADUserGroupManager.exe"')
            }
            else {
              $updatedContent += $line
            }
          }
          $updatedContent | Set-Content update.json
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          releaseName: "Release ${{ steps.gitversion.outputs.SemVer }}"
          draft: false
          prerelease: false
          artifacts: "bin/Release/net48/ADUserGroupManager.exe,update.json"
          artifactName: "ADUserGroupManager.exe"
