name: BuildAndRelease

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Build project
        run: dotnet build --configuration Release

      - name: Run ILMerge Script
        shell: pwsh
        run: |
          # Definir rutas relativas basadas en el workspace
          $releasePath = "$env:GITHUB_WORKSPACE/ADUserGroupManager/bin/Release/net48"
          $outputPath = "$releasePath/Install"
          if (-not (Test-Path $outputPath)) {
              New-Item -ItemType Directory -Path $outputPath | Out-Null
          }
          
          # Ruta de ILMerge (asegúrate de que ILMerge esté incluido en el repositorio, por ejemplo en packages)
          $ilMergePath = "$env:GITHUB_WORKSPACE/ADUserGroupManager/packages/ILMerge.3.0.41/tools/net452/ILMerge.exe"
          if (-not (Test-Path $ilMergePath)) {
              Write-Host "ILMerge.exe no encontrado en $ilMergePath"
              exit 1
          }
          
          # Obtener lista de DLLs y ejecutar ILMerge para generar un único exe
          $dlls = Get-ChildItem -Path $releasePath -Filter *.dll | ForEach-Object { $_.FullName }
          if ($dlls.Count -eq 0) {
              Write-Host "No se encontraron DLLs en $releasePath"
              exit 1
          }
          $exeFile = "$releasePath/ADUserGroupManager.exe"
          $outputFile = "$outputPath/ADUserGroupManagerMerged.exe"
          $cmdArgs = "/out:$outputFile $exeFile " + ($dlls -join " ")
          Write-Host "Ejecutando ILMerge..."
          & $ilMergePath $cmdArgs.Split(" ")
          if ($LASTEXITCODE -eq 0) {
              Write-Host "ILMerge completado exitosamente. Archivo generado en $outputFile"
          } else {
              Write-Host "Error durante la ejecución de ILMerge."
              exit 1
          }

      - name: List output folder
        shell: pwsh
        run: |
          Write-Host "Listando el contenido de la carpeta de salida:"
          Get-ChildItem -Path "$env:GITHUB_WORKSPACE/ADUserGroupManager/bin/Release/net48/Install" -Recurse

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          releaseName: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
          artifacts: |
            ADUserGroupManager/bin/Release/net48/Install/ADUserGroupManagerMerged.exe
